<?php
/**
 * @file
 * Install, update and uninstall functions for the standard
 * installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function propeople_install() {

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $full_html_format = filter_permission_name($full_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'access comments',
    $full_html_format,
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'access comments',
    'post comments',
    'skip comment approval',
    $full_html_format,
  ));

  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')->fields(array(
    'uid' => 1,
    'rid' => $admin_role->rid,
  ))->execute();

  // Update the menu router information.
  menu_rebuild();

  // Enable the Origins theme and set it as the default.
  theme_enable(array(
    'adaptivetheme',
    'sof_theme',
  ));

  // The Bartik theme is automatically enabled during installation. Disable it.
  db_update('system')->fields(array('status' => 0))->condition('type', 'theme')->condition('name', 'bartik')->execute();

  // Set the default and administration themes.
  variable_set('theme_default', 'sof_theme');

  // Enable the admin theme.
  db_update('system')->fields(array('status' => 1))->condition('type', 'theme')->condition('name', 'seven')->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Create default flat shipping services.
  _propeople_configure_default_shipping_services();

  // Disable account pane from commerce review page.
  _propeople_disable_commerce_account_pane();
}

/**
 * Implements hook_install_tasks().
 *
 * Important to note - this happens after modules install and locale setup
 */
function propeople_install_tasks() {
  return array(
    'propeople_create_initial_content' => array('display_name' => st('Create initial content')),
    'propeople_add_default_solr_search' => array('display_name' => st('Default Solr Search Options')),
    'propeople_change_settings_of_core_search_pages' => array('display_name' => st('Default Solr Search Pages')),
  );
}

/**
 * Helper function.
 *
 * Create and enable initial content that can't or shouldnt be exported to
 * features, but should be available on istallation.
 */
function propeople_create_initial_content() {
  _propeople_create_menus();
  _propeople_set_default_domain();
  _propeople_default_follow_link();
}

/**
 * Helper function.
 *
 * Programatically crate:
 *  - Top navigation menu and links
 *  - Main menu main links only
 */
function _propeople_create_menus() {

  $menus = array(array(
      'menu_name' => 'menu-top-navigation',
      'title' => 'Top navigation',
      'description' => 'Used for the links in the upper right corner of the page',
    ));

  // Look the table first if the data does exist.
  foreach ($menus as $menu) {
    $exists = db_query("SELECT title FROM {menu_custom} WHERE menu_name=:menu_name", array(':menu_name' => $menu['menu_name']))->fetchField();

    // Save the record if the data does not exist.
    if (!$exists) {
      menu_save($menu);
    }
  }

  // Create header top menu.
  $items = array(
    array(
      'link_title' => t('About us'),
      'link_path' => '<front>',
      'weight' => 0,
      'expanded' => 1,
    ),
    array(
      'link_title' => t('Contact'),
      'link_path' => '<front>',
      'weight' => 1,
      'expanded' => 1,
    ),
    array(
      'link_title' => t('Membership'),
      'link_path' => '<front>',
      'weight' => 1,
      'expanded' => 1,
    ),
  );
  populate_menu($items, 'menu-top-navigation');

  // Create main menu.
  $items = array(
    array(
      'link_title' => t('School board'),
      'link_path' => '<front>',
      'weight' => 0,
      'expanded' => 1,
      'childs' => array(
        array(
          'link_title' => t('Column I'),
          'link_path' => '<front>',
          'weight' => 0,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column II'),
          'link_path' => '<front>',
          'weight' => 1,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column III'),
          'link_path' => '<front>',
          'weight' => 2,
          'expanded' => 1,
        ),
      ),
    ),
    array(
      'link_title' => t('Parents'),
      'link_path' => '<front>',
      'weight' => 1,
      'expanded' => 1,
      'childs' => array(
        array(
          'link_title' => t('Column I'),
          'link_path' => '<front>',
          'weight' => 0,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column II'),
          'link_path' => '<front>',
          'weight' => 1,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column III'),
          'link_path' => '<front>',
          'weight' => 2,
          'expanded' => 1,
        ),
      ),
    ),
    array(
      'link_title' => t('News'),
      'link_path' => '<front>',
      'weight' => 2,
      'expanded' => 1,
      'childs' => array(
        array(
          'link_title' => t('Column I'),
          'link_path' => '<front>',
          'weight' => 0,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column II'),
          'link_path' => '<front>',
          'weight' => 1,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column III'),
          'link_path' => '<front>',
          'weight' => 2,
          'expanded' => 1,
        ),
      ),
    ),
    array(
      'link_title' => t('Topics'),
      'link_path' => '<front>',
      'weight' => 3,
      'expanded' => 1,
      'childs' => array(
        array(
          'link_title' => t('Column I'),
          'link_path' => '<front>',
          'weight' => 0,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column II'),
          'link_path' => '<front>',
          'weight' => 1,
          'expanded' => 1,
        ),
        array(
          'link_title' => t('Column III'),
          'link_path' => '<front>',
          'weight' => 2,
          'expanded' => 1,
        ),
      ),
    ),
    array(
      'link_title' => t('Search'),
      'link_path' => 'search/site',
      'weight' => 4,
      'expanded' => 1,
    ),
  );
  populate_menu($items, 'main-menu');

}

/**
 * Programatically update default domain.
 *
 * -Change default domain name
 *
 * @see https://www.drupal.org/project/domain
 */
function _propeople_set_default_domain() {

  $domain_def = domain_default();
  $domain_def['sitename'] = 'Skole og ForÃ¦ldre';

  domain_save($domain_def);
}

/**
 * Programatically create follow links.
 *
 *  - Remove the rss follow link (added by default on module install)
 *  - Add the new facebook link
 *  - Add the new twitter link
 *
 * @see https://www.drupal.org/project/follow
 */
function _propeople_default_follow_link() {

  // Default domain tag.
  $follow_domain = 'domin_1';

  // Add a default facebook and twitter links to the page.
  $values = array(
    array(
      'name' => $follow_domain . '_facebook',
      'path' => 'https://www.facebook.com/SkoleOgForaeldre',
      'options' => 'a:2:{s:5:"query";a:0:{}s:8:"fragment";s:0:"";}',
      'uid' => 0,
      'weight' => -10,
    ),
    array(
      'name' => $follow_domain . '_twitter',
      'path' => 'https://twitter.com/SkoleForaeldre',
      'options' => 'a:2:{s:5:"query";a:0:{}s:8:"fragment";s:0:"";}',
      'uid' => 0,
      'weight' => -9,
    ),
  );

  $query = db_insert('follow_links')->fields(array(
    'name',
    'path',
    'options',
    'uid',
    'weight',
  ));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Remove default RSS link crated on module install.
  db_delete('follow_links')->condition('lid', 1)->execute();

}

/**
 * Helper function for menu create.
 *
 * @param array $links
 *   Contains all links data used menu_link_save()
 * @param string $menu_name
 *   Menu machine name
 * @param int $plid
 *   Menu link parent id (optional)
 */
function populate_menu($links, $menu_name, $plid = 0) {
  foreach ($links as $link) {
    $ls = array(
      'menu_name' => $menu_name,
      'link_title' => $link['link_title'],
      'link_path' => $link['link_path'],
      'plid' => $plid,
      'weight' => $link['weight'],
      'expanded' => $link['expanded'],
    );

    // Save the record if the database.
    $newpid = menu_link_save($ls);
    if (!empty($link['childs'])) {
      populate_menu($link['childs'], $menu_name, $newpid);
    };

  }
}

/**
 * Programatically configure solr configuration.
 */
function propeople_add_default_solr_search() {

  // Set devel apache solr index.
  variable_set('url_default_apachesolr_index', 'http://aegirdb.workingpropeople.com:8983/solr/sof');

  $url_solr = variable_get('url_default_apachesolr_index');

  // Setup SOLR.
  if ($url_solr) {
    _propeople_configure_default_apachesolr_environment($url_solr);
  }
}

/**
 * Helper function that configurate apachesolr environment.
 *
 * @param string $url_solr
 *   Default search index url. Will be changed on the production page trough
 *   the ui
 */
function _propeople_configure_default_apachesolr_environment($url_solr) {

  $env_id = apachesolr_default_environment();
  $environment = apachesolr_environment_load($env_id);
  $environment['name'] = 'SOF Solr Index';
  $environment['url'] = $url_solr;
  $environment['conf']['multisitesearch'] = 1;
  $environment['name'] = 'SOF Solr Index';
  $environment['index_bundles']['node'] = array(
    0 => 'article',
    1 => 'basic_page',
    2 => 'news',
    3 => 'publication',
    4 => 'section',
    5 => 'webform',
  );
  $environment['conf'] = array(
    'apachesolr_direct_commit' => 0,
    'apachesolr_index_last' => array(),
    'apachesolr_read_only' => '0',
    'apachesolr_search_changed_boost' => '0:0',
    'apachesolr_search_comment_boost' => '0:0',
    'apachesolr_search_date_boost' => '0:0',
    'apachesolr_search_promote_boost' => '0',
    'apachesolr_search_sticky_boost' => '0',
    'apachesolr_search_type_boosts' => array(
      'article' => '0',
      'basic_page' => '0',
      'news' => '0',
      'publication' => '0',
      'section' => '0',
      'slider' => '0',
      'webform' => '0',
    ),
    'apachesolr_soft_commit' => 0,
    'field_bias' => array(
      'content' => '1.0',
      'label' => '5.0',
      'tags_h1' => '5.0',
      'tags_h2_h3' => '3.0',
      'tags_h4_h5_h6' => '2.0',
      'tags_inline' => '1.0',
      'taxonomy_names' => '0',
      'tos_content_extra' => '0',
      'tos_name' => '0',
      'tos_name_formatted' => '0',
      'ts_comments' => '0',
      'ts_custom_text' => '1.0',
    ),
  );
  apachesolr_environment_save($environment);
  cache_clear_all('apachesolr:environments', 'cache_apachesolr');

}

/**
 * Helper function that change core search and terms search page settings.
 */
function propeople_change_settings_of_core_search_pages() {

  drupal_static_reset('apachesolr_search_load_all_search_pages');

  // Set settings for the.
  $search_page = apachesolr_search_page_load('core_search');
  if (!empty($search_page)) {

    // Desable "Did you mean â¦ ?" above search results.
    $search_page['settings']['apachesolr_search_spellcheck'] = 0;

    // Enable user input trough url (Toolbox search filters).
    $search_page['settings']['apachesolr_search_allow_user_input'] = 1;

    // Select 'Show enabled facets' blocks in their configured regions'.
    $search_page['settings']['apachesolr_search_browse'] = 'blocks';

    apachesolr_search_page_save($search_page);
  }

  $terms_page = apachesolr_search_page_load('taxonomy_search');
  if (!empty($terms_page)) {

    // Add global settings for the terms page.
    $terms_page['label'] = 'Taxonomy Search';
    $terms_page['description'] = 'Search all items with given term';
    $terms_page['page_title'] = 'Site';
    $terms_page['env_id'] = 'solr';

    // Enable search form on the terms page.
    $terms_page['settings']['apachesolr_search_search_box'] = 1;

    // Desable "Did you mean â¦ ?" above search results.
    $terms_page['settings']['apachesolr_search_spellcheck'] = 0;

    // Select 'Show enabled facets' blocks in their configured regions and show
    // all results form the first page.
    $terms_page['settings']['apachesolr_search_browse'] = 'results';

    apachesolr_search_page_save($terms_page);
  }
}

/**
 * Helper function for dropping multiple fields and then purges the field data.
 *
 * Use with caution.
 *
 * @param array $params
 *   An array of properties
 * @param array $include_additional
 *   TRUE will override the default behavior
 *
 * @see field_read_instances()
 */
function propeople_delete_fields_instances(array $params, $include_additional = array()) {
  if ($instances = field_read_instances($params, $include_additional)) {
    foreach ($instances as $instance) {
      field_delete_instance($instance, TRUE);
    }
    field_purge_batch(20);
  }
}

/**
 * Helper function for creating default shipping services per order weight.
 */
function _propeople_configure_default_shipping_services() {
  $sof_services = array(
    'weight_to_0_005' => array(
      'title' => 'Weight to 0.005',
      'amount' => 0,
    ),
    'weight_to_0_2' => array(
      'title' => 'Weight to 0.2',
      'amount' => 3125,
    ),
    'weight_to_0_45' => array(
      'title' => 'Weight to 0.45',
      'amount' => 4800,
    ),
    'weight_to_0_9' => array(
      'title' => 'Weight to 0.9',
      'amount' => 6050,
    ),
    'weight_to_1_9' => array(
      'title' => 'Weight to 1.9',
      'amount' => 7050,
    ),
    'weight_to_4_8' => array(
      'title' => 'Weight to 4.8',
      'amount' => 8500,
    ),
    'weight_to_9_6' => array(
      'title' => 'Weight to 9.6',
      'amount' => 11000,
    ),
    'weight_to_19' => array(
      'title' => 'Weight to 19',
      'amount' => 18000,
    ),
  );

  // We need the module to be enabled before trying to insert in its table.
  module_enable('commerce_flat_rate');
  if (module_exists('commerce_flat_rate')) {

    foreach ($sof_services as $name => $service) {
      $data = array(
        'name' => $name,
        'title' => $service['title'],
        'display_title' => t('Shipping Fee'),
        'description' => '',
        'rules_component' => TRUE,
        'amount' => $service['amount'],
        'currency_code' => 'DKK',
        'data' => array(),
      );
      try {
        drupal_write_record('commerce_flat_rate_service', $data);
      }
      catch (Exception $ex) {
        watchdog('Propeople', $watchdogex->getMessage(), array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Helper function for disabling account pane from commerce review page.
 *
 * The setting can not be exported into feature.
 */
function _propeople_disable_commerce_account_pane() {
  if (module_exists('commerce_checkout')) {
    try {
      $disable_account = db_update('commerce_checkout_pane')
          ->fields(array('review' => 0))
          ->condition('pane_id', 'account', '=')
          ->execute();
    }
    catch (Exception $e) {
      watchdog('Propeople', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Remove some fields from commerce customer types.
 */
function propeople_update_7001() {
  $fields = array(
    array(
      'entity_type' => 'commerce_customer_profile',
      'field_name' => 'field_sof_commerce_customer_post',
      'bundle' => 'billing',
    ),
    array(
      'entity_type' => 'commerce_customer_profile',
      'field_name' => 'field_sof_commerce_customer_post',
      'bundle' => 'shipping',
    ),
    array(
      'entity_type' => 'commerce_customer_profile',
      'field_name' => 'field_sof_commerce_customer_typĞµ',
      'bundle' => 'shipping',
    ),
    array(
      'entity_type' => 'commerce_customer_profile',
      'field_name' => 'field_sof_commerce_customer_firm',
      'bundle' => 'shipping',
    ),
  );

  foreach ($fields as $params) {
    propeople_delete_fields_instances($params, array());
  }
}

/**
 * Implements hook_update_N().
 *
 * Remove body field from section and publication content type.
 */
function propeople_update_7002() {
  $fields = array(
    array(
      'entity_type' => 'node',
      'field_name' => 'body',
      'bundle' => 'publication',
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'body',
      'bundle' => 'section',
    ),
  );

  foreach ($fields as $params) {
    propeople_delete_fields_instances($params, array());
  }
}

/**
 * Implements hook_update_N().
 *
 * Remove all commerce coupons record in 'field_config' and
 * 'field_config_instance' tables.
 * Because of problems with the Commerce coupon modules.
 */
function propeople_update_7003() {
  try {
    $field_config = db_delete('field_config')
      ->condition('field_name', '%coupon%', 'LIKE')
      ->execute();
  }
  catch (Exception $e) {
    watchdog('Propeople', check_plain($e->getMessage()), array(), WATCHDOG_ERROR);
  }

  try {
    $field_config_instance = db_delete('field_config_instance')
      ->condition('field_name', '%coupon%', 'LIKE')
      ->execute();
  }
  catch (Exception $e) {
    watchdog('Propeople', check_plain($e->getMessage()), array(), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_update_N().
 *
 * Enables Commerce Flat Rate module and creates default shipping services.
 */
function propeople_update_7004() {
  _propeople_configure_default_shipping_services();
  cache_clear_all();
}

/**
 * Implements hook_update_N().
 *
 * Delete address field from shipping and billing commerce profiles.
 */
function propeople_update_7005() {
  propeople_delete_fields_instances(
      array(
        'entity_type' => 'commerce_customer_profile',
        'field_name' => 'commerce_customer_address',
        'bundle' => 'shipping',
      ),
      array()
  );

  propeople_delete_fields_instances(
      array(
        'entity_type' => 'commerce_customer_profile',
        'field_name' => 'commerce_customer_address',
        'bundle' => 'billing',
      ),
      array()
  );
}

/**
 * Implements hook_update_N().
 *
 * Change the EAN field length. The field is locked because
 * there are values in the database.
 */
function propeople_update_7006() {
  try {
    // Alter value field length in fields table.
    db_update('field_data_field_sof_commerce_customer_ean')
        ->fields(array(
          'field_sof_commerce_customer_ean_value' => 13,
        ))
        ->execute();
    // Alter value field length in fields revision table.
    db_update('field_revision_field_sof_commerce_customer_ean')
        ->fields(array(
          'field_sof_commerce_customer_ean_value' => 13,
        ))
        ->execute();
  }
  catch (Exception $e) {
    watchdog('Propeople', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  try {
    // Update field config with new max length.
    $result = db_select('field_config', 'f')
        ->fields('f', array('data'))
        ->condition('field_name', 'field_sof_commerce_customer_ean', '=')
        ->execute();

    $config = $result->fetchField();
    $config_array = unserialize($config);
    $config_array['settings']['max_length'] = 13;
    $updated_config = serialize($config_array);
    db_update('field_config')
        ->fields(array('data' => $updated_config))
        ->condition('field_name', 'field_sof_commerce_customer_ean', '=')
        ->execute();
  }
  catch (Exception $e) {
    watchdog('Propeople', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_update_N().
 *
 * Disable account pane from commerce review.
 * Because the settings can not be exported.
 */
function propeople_update_7007() {
  _propeople_disable_commerce_account_pane();
}
