<?php

/**
 * @file
 * Implements hooks and globally accesible functions.
 *
 * @author Lachezar Valchev <lachezar@propeople.dk>
 */

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * @see field_group.api.php
 */
function sof_general_tweaks_field_group_build_pre_render_alter(&$element) {
  // Add states for fieldgroups in publication content type.
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'publication_node_form') {
      $element['group_upload']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
      );

      $element['group_generate_from_content']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function sof_general_tweaks_field_extra_fields() {
  // News deck.
  // Additional fild for additional latest news.
  $extra['node']['news']['display']['additional_bottom_nodes'] = array(
    'label' => t('Additional bottom news'),
    'description' => t('Renders latest 3 news'),
    'weight' => 4,
    'visible' => FALSE,
  );
  $extra['node']['article']['display']['additional_bottom_nodes'] = array(
    'label' => t('Additional bottom news'),
    'description' => t('Renders latest 3 news'),
    'weight' => 4,
    'visible' => FALSE,
  );

  // Recommended items deck.
  // Additional fild for additional latest news.
  $extra['fieldable_panels_pane']['recommended_items_pane']['display']['overview_recommended_items'] = array(
    'label' => t('Overview'),
    'description' => t('Overview of the items in this section'),
    'weight' => 4,
  );

  // What we write about deck.
  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['most_read_nodes'] = array(
    'label' => t('Most read'),
    'description' => t('Most read nodes'),
    'weight' => 4,
  );

  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['last_updated_nodes'] = array(
    'label' => t('Last updated'),
    'description' => t('Last updated nodes'),
    'weight' => 4,
  );

  return $extra;

}

/**
 * Implements hook_node_view().
 */
function sof_general_tweaks_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);
  $extrafield_name = 'additional_bottom_nodes';

  // Attach 'news_deck_latest_3_nodes' to the node as extra field.
  if (isset($extrafields[$extrafield_name]) && isset($extrafields[$extrafield_name]['visible']) && $extrafields[$extrafield_name]['visible']) {

    $node->content['additional_bottom_nodes'] = array('#markup' => views_embed_view('news_deck_latest_3_nodes', 'news_deck_latest_three_news'));

  }
}

/**
 * Implements hook_entity_view().
 */
function sof_general_tweaks_entity_view($entity, $type, $view_mode, $langcode) {
  switch ($type) {
    case 'fieldable_panels_pane':
      // Attach 'recommended_items_overview' view to the panel pane as extra
      // field.
      if ($entity->bundle == 'recommended_items_pane') {
        $entity->content['overview_recommended_items'] = array(
          '#type' => 'item',
          '#title' => t('Overview'),
          '#markup' => views_embed_view('recommended_items_overview', 'recommended_items_overview'),
        );
      }
      // Attach 'we_are_writing_about_additional_displays' view to the panel
      // pane as extra field.
      elseif ($entity->bundle == 'what_we_write_about_pane') {
        $entity->content['most_read_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Most read'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'most_popular'),
        );
        $entity->content['last_updated_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Latest updated'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'latest_updated'),
        );
      }
      break;
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {

  $node = node_load($entity->vid);

  // Render the node and strip all html tags from it.
  $full_node_html = drupal_html_to_text(drupal_render(node_view($node)));

  // Add new field for drupal search.
  $document->addField('ts_custom_text', $full_node_html);

  // Add domain info in the index.
  if (isset($entity->domains)) {
    foreach ($entity->domains as $domain) {
      // Switch default domain to 0, apache solr query issue on domain -1
      if ($domain == -1) {
        $domain = 0;
      }

      // Build an apachesolr-compatible domain search index key.
      $key = array(
        'name' => 'domain_id',
        'multiple' => TRUE,
        'index_type' => 'integer',
      );
      $key = apachesolr_index_key($key);

      // Add domain key to document.
      $document->setMultiValue($key, $domain);
    }
  }

}

/**
 * Implements hook_apachesolr_query_prepare().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
  // Make ts_custom_text custom field searchable.
  $query->addParam('fl', 'ts_custom_text');

  // Expose additional fields in the search result page.
  $query->addParam('fl', 'im_field_category');
  $query->addParam('fl', 'im_field_category_publication');
  $query->addParam('fl', 'im_field_category_single');
  $query->addParam('fl', 'teaser');

  // Add domain key to filter all queries.
  $domain = domain_get_domain();
  $query->addParam('fq', 'im_domain_id:' . $domain['domain_id']);
}

/**
 * Implements hook_apachesolr_field_name_map_alter().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_field_name_map_alter(array &$map) {
  // Add human readable name for our custom field.
  $map['ts_custom_text'] = t('The full node object');
}

/**
 * Implements hook_form_alter().
 */
function sof_general_tweaks_form_alter(&$form, &$form_state, $form_id) {

  // Alter taxonomy search form.
  switch ($form_id) {
    case 'apachesolr_search_custom_page_search_form':
      if (isset($form['#search_page']['page_id'])) {
        if ($form['#search_page']['page_id'] == 'taxonomy_search') {

          // Remove retain filters field.
          unset($form['basic']['retain-filters']);

          // Change form action to global search page.
          $form['#action'] = '/search/site';
        }
      }
      break;

    // Alter mailchimp subscribe block form.
    case 'mailchimp_signup_subscribe_block_sof_mailchimp_form_form':
      // Wrap email field and submit button, in order to be replaced.
      $form['mergevars']['#prefix'] = '<div id="sof-general-tweaks-mailchimp"> ' . $form['mergevars']['#prefix'];
      $form['submit']['#suffix'] = '</div>';

      // Add ajax to the form.
      $form['submit']['#ajax'] = array(
        'callback' => 'sof_general_tweaks_mailchimp_ajax',
        'wrapper' => 'sof-general-tweaks-mailchimp',
        'method' => 'replace',
        'effect' => 'fade',
      );
      break;

    case 'commerce_checkout_form_checkout':
      unset($form['account']);

      // Add custom validation to customer profile fields: telephone,
      // postal_code, cvr, ean.
      $shipping = $form['customer_profile_shipping'];
      $billing = $form['customer_profile_billing'];
      $form['customer_profile_billing']['field_sof_commerce_customer_tel'][$billing['field_sof_commerce_customer_tel']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_commerce_customer_cvr'][$billing['field_sof_commerce_customer_cvr']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_commerce_customer_ean'][$billing['field_sof_commerce_customer_ean']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['commerce_customer_address'][$billing['commerce_customer_address']['#language']][0]['locality_block']['postal_code']['#element_validate'] = array('sof_general_tweaks_commerse_validation');

      $form['customer_profile_shipping']['field_sof_commerce_customer_tel'][$shipping['field_sof_commerce_customer_tel']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_shipping']['commerce_customer_address'][$shipping['commerce_customer_address']['#language']][0]['locality_block']['postal_code']['#element_validate'] = array('sof_general_tweaks_commerse_validation');

      // Make the custom street number field required.
      $form['customer_profile_billing']['commerce_customer_address'][$billing['commerce_customer_address']['#language']][0]['street_block']['thoroughfare_street_number']['#required'] = TRUE;
      $form['customer_profile_shipping']['commerce_customer_address'][$shipping['commerce_customer_address']['#language']][0]['street_block']['thoroughfare_street_number']['#required'] = TRUE;

      break;

    case 'views_form_commerce_cart_form_sof_default':
      $settings = array();
      $commerce_line_items = field_get_items('commerce_order', $form_state['order'], 'commerce_line_items');

      foreach ($commerce_line_items as $key => $item) {
        $line_item = commerce_line_item_load($item['line_item_id']);

        if (isset($line_item->commerce_product)) {
          $commerce_product_id = field_get_items('commerce_line_item', $line_item, 'commerce_product');
          $commerce_product = commerce_product_load($commerce_product_id[0]['product_id']);

          $commerce_quantity = field_get_items('commerce_product', $commerce_product, 'field_sof_commerce_quantity');
          if (is_array($commerce_quantity) && $commerce_quantity[0]['value'] > 1) {
            $settings[$key] = $commerce_quantity[0]['value'];
          }
        }
      }

      $form['#attached']['js'] = array(
        drupal_get_path('module', 'sof_general_tweaks') . '/js/sof_general_tweaks_commerce.js',
      );
      drupal_add_js(array('sofGeneralTweaksCommerce' => $settings), 'setting');
      break;
  }
}

/**
 * Implements mailchimp ajax callback.
 */
function sof_general_tweaks_mailchimp_ajax($form, $form_state) {
  if (!form_get_errors()) {
    $signup = reset($form_state['build_info']['args']);
    return $signup->settings['confirmation_message'];
  }
  else {
    unset($form['description']);
    unset($form['mailchimp_lists']);
    return $form;
  }
}

/**
 * Implements hook_message_presave().
 */
function sof_general_tweaks_message_presave($message) {
  if ($message->type == 'sof_order_admin_message') {
    $message->arguments['!sof-order-summary'] = array(
      'callback' => 'sof_order_admin_message',
      'pass message' => TRUE,
    );
  }

  if ($message->type == 'sof_order_user_message') {
    $message->arguments['!order-summary'] = array(
      'callback' => 'sof_order_user_message',
      'pass message' => TRUE,
    );
  }
}

/**
 * Implements message argument callback.
 *
 * Message type: sof_order_admin_message.
 */
function sof_order_admin_message(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('sof_commerce_cart_summary_admin');
  $view->set_arguments(array($wrapper->field_sof_message_order->getIdentifier()));
  $view->hide_admin_links = TRUE;
  return $view->preview();
}

/**
 * Implements message argument callback.
 *
 * Message type: sof_order_user_message.
 */
function sof_order_user_message(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('sof_commerce_cart_checkout_summary');
  $view->set_arguments(array($wrapper->field_sof_message_order->getIdentifier()));
  $view->hide_admin_links = TRUE;
  return $view->preview();
}

/**
 * Implements hook_mail_alter().
 *
 * Alter the mail send to the user in order to attach pdfs bought by him.
 */
function sof_general_tweaks_mail_alter(&$message) {
  $attachments = array();

  if ($message['key'] === 'sof_order_user_message') {
    $order = field_get_items('message', $message['params']['message_entity'], 'field_sof_message_order');
    $oid = $order['0']['target_id'];
    $order_obj = commerce_order_load($oid);
    $line_items = field_get_items('commerce_order', $order_obj, 'commerce_line_items');
    foreach ($line_items as $line_item) {
      $commerce_li = commerce_line_item_load($line_item['line_item_id']);
      if (isset($commerce_li->commerce_product)) {
        $commerce_product = field_get_items('commerce_line_item', $commerce_li, 'commerce_product');
        $product = commerce_product_load($commerce_product[0]['product_id']);
        if (isset($product->field_sof_commerce_pdf)) {
          $pdf = field_get_items('commerce_product', $product, 'field_sof_commerce_pdf');
          $attachments[] = array(
            'filepath' => $pdf[0]['uri'],
          );
        }
      }
    }
    $message['params']['attachments'] = $attachments;
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 */
function sof_general_tweaks_commerce_line_item_summary_link_info_alter(&$links) {
  // Link checkout button to the cart.
  if (isset($links['checkout'])) {
    $links['checkout']['href'] = 'cart';
  }
}

/**
 * Implements hook_menu_alter().
 */
function sof_general_tweaks_menu_alter(&$items) {
  $items['cart']['page callback'] = 'sof_general_tweaks_cart_callback';
}

/**
 * Implements custom cart menu callback.
 */
function sof_general_tweaks_cart_callback() {
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {

      // Add the form for editing the cart contents.
      $content = commerce_embed_view('commerce_cart_form_sof', 'default', array($order->order_id), 'cart');
    }
  }

  return $content;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sof_general_tweaks_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $sof_quantity = field_get_items('commerce_product', $form_state['default_product'], 'field_sof_commerce_quantity');

  if (is_array($sof_quantity) && $sof_quantity[0]['value'] > 1) {
    $form['quantity']['#value'] = $sof_quantity[0]['value'];
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It is needed because of adding Street number field to the addressfield
 * container.
 */
function sof_general_tweaks_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements the commerce customer profile fields validation callback.
 */
function sof_general_tweaks_commerse_validation($element, &$form_state) {
  $value = $element['#value'];

  // Skip shipping fields validattion if the information will be copied from
  // the billing profile.
  $copy = $form_state['input']['customer_profile_shipping']['commerce_customer_profile_copy'];
  if ($copy && $element['#parents'][0] == 'customer_profile_shipping') {
    return;
  }
  // Validate postal_code to be a number with exactly 4 digits.
  if (isset($element['#title'])) {
    if ($element['#title'] == 'Postal code') {
      if ($value && (!is_numeric($value) || drupal_strlen($value) != 4)) {
        form_error($element, t('Fill Postal code.'));
      }
    }
  }
  if (isset($element['#field_name'])) {
    switch ($element['#field_name']) {
      // Validate phone to contain only digits, spaces and +.
      case 'field_sof_commerce_customer_tel':
        $pattern = '/(^\+)?(([0-9]+\s?)+)$/';
        if ($value && !preg_match($pattern, $value)) {
          form_error($element, t('Fill Phone.'));
        }
        break;

      // Validate cvr to be a number with exactly 8 digits.
      case 'field_sof_commerce_customer_cvr':
        if ($value && (!is_numeric($value) || drupal_strlen($value) != 8)) {
          form_error($element, t('Fill CVR Number.'));
        }
        break;

      // Validate ean to be a number with exactly 13 digits.
      case 'field_sof_commerce_customer_ean':
        if ($value && (!is_numeric($value) || drupal_strlen($value) != 13)) {
          form_error($element, t('Fill EAN number.'));
        }
        break;
    }
  }
}

// -----------------------------------Stree Number functionality---------------.
// Based on Address Field Phone module.

/**
 * Implements hook_field_attach_presave().
 *
 * Store additional address fields serialized in addressfield data column.
 */
function sof_general_tweaks_field_attach_presave($entity_type, $entity) {
  $addressfields = sof_general_tweaks_addressfield_types();
  foreach ($addressfields as $field_name) {
    if (isset($entity->$field_name)) {
      $default_fields = array_keys(addressfield_default_values());
      $default_fields[] = 'element_key';
      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          $data = array();
          foreach ($fieldset as $field_key => $field_value) {
            // Compare fields with addressfield default fields and store any
            // additional fields in data.
            if (!in_array($field_key, $default_fields)) {
              // Store additional field value.
              $data[$field_key] = $field_value;
            }
          }
          if (!empty($data)) {
            $entity->{$field_name}[$lang_code][$delta]['data'] = serialize($data);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 *
 * Load and set additional addressfield field values from serialized data
 * column.
 */
function sof_general_tweaks_field_attach_load($entity_type, $entities, $age, $options) {
  $addressfields = sof_general_tweaks_addressfield_types();
  $elements = drupal_map_assoc(array(
    'thoroughfare_street_number',
    'premise_street_number',
  ));

  foreach ($entities as $entity) {
    foreach ($addressfields as $field_name) {
      if (empty($entity->{$field_name})) {
        continue;
      }

      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          if (!empty($fieldset['data'])) {
            // Unserialize data, else skip if string.
            if (($data = unserialize($fieldset['data'])) && is_array($data)) {
              // Store unserialized data values in additional fields.
              $phone_data = array_intersect_key($data, $elements);
              $entity->{$field_name}[$lang_code][$delta] = array_merge($fieldset, $phone_data);
            }
          }
        }
      }
    }
  }
}

/**
 * Returns an array of the field names of any addressfields.
 */
function sof_general_tweaks_addressfield_types() {
  if (!isset($addressfields)) {
    static $addressfields;
    $result = db_query("SELECT field_name FROM {field_config} WHERE type = 'addressfield'");
    $addressfields = array();
    foreach ($result as $row) {
      $addressfields[] = $row->field_name;
    }
  }
  return $addressfields;
}

/**
 * Implemens render callback for the street number fields.
 */
function addressfield_street_number_render($format) {
  $address = $format['#address'];

  $format['thoroughfare_street_number'] = array(
    '#title' => t('Street Number'),
    '#children' => check_plain($address['thoroughfare_street_number']),
    '#attributes' => array('class' => array('thoroughfare-street-number')),
    '#type' => 'addressfield_container',
    '#tag' => 'span',
  );

  $format['premise_street_number'] = array(
    '#title' => t('Street Number'),
    '#children' => check_plain($address['premise_street_number']),
    '#attributes' => array('class' => array('premise-street-number')),
    '#type' => 'addressfield_container',
    '#tag' => 'span',
  );

  return $format;
}
// --------------------------End Street Number functionality-------------------.
