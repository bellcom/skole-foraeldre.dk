<?php

/**
 * @file
 * Implements hooks and globally accesible functions.
 *
 * @author Lachezar Valchev <lachezar@propeople.dk>
 */

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * @see field_group.api.php
 */
function sof_general_tweaks_field_group_build_pre_render_alter(&$element) {
  // Add states for fieldgroups in publication content type.
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'publication_node_form') {
      $element['group_upload']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
      );

      $element['group_generate_from_content']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function sof_general_tweaks_field_extra_fields() {
  // News deck.
  // Additional fild for additional latest news.
  $extra['node']['news']['display']['additional_bottom_nodes'] = array(
    'label' => t('Additional bottom news'),
    'description' => t('Renders latest 3 news'),
    'weight' => 4,
    'visible' => FALSE,
  );

  // Recommended items deck.
  // Additional fild for additional latest news.
  $extra['fieldable_panels_pane']['recommended_items_pane']['display']['overview_recommended_items'] = array(
    'label' => t('Overview'),
    'description' => t('Overview of the items in this section'),
    'weight' => 4,
  );

  // What we write about deck.
  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['most_read_nodes'] = array(
    'label' => t('Most read'),
    'description' => t('Most read nodes'),
    'weight' => 4,
  );

  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['last_updated_nodes'] = array(
    'label' => t('Last updated'),
    'description' => t('Last updated nodes'),
    'weight' => 4,
  );

  return $extra;

}

/**
 * Implements hook_node_view().
 */
function sof_general_tweaks_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node -> type, $view_mode);
  $extrafield_name = 'additional_bottom_nodes';

  // Attach 'news_deck_latest_3_nodes' to the node as extra field.
  if (isset($extrafields[$extrafield_name]) && isset($extrafields[$extrafield_name]['visible']) && $extrafields[$extrafield_name]['visible']) {

    $node -> content['additional_bottom_nodes'] = array('#markup' => views_embed_view('news_deck_latest_3_nodes', 'news_deck_latest_three_news'));

  }
}

/**
 * Implements hook_entity_view().
 */
function sof_general_tweaks_entity_view($entity, $type, $view_mode, $langcode) {
  switch ($type) {
    case 'fieldable_panels_pane':
      // Attach 'recommended_items_overview' view to the panel pane as extra
      // field.
      if ($entity -> bundle == 'recommended_items_pane') {
        $entity -> content['overview_recommended_items'] = array(
          '#type' => 'item',
          '#title' => t('Overview'),
          '#markup' => views_embed_view('recommended_items_overview', 'recommended_items_overview'),
        );
      }
      // Attach 'we_are_writing_about_additional_displays' view to the panel
      // pane as extra field.
      elseif ($entity -> bundle == 'what_we_write_about_pane') {
        $entity -> content['most_read_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Most read'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'most_popular'),
        );
        $entity -> content['last_updated_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Latest updated'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'latest_updated'),
        );
      }
      break;
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {

  $node = node_load($entity -> vid);

  // Render the node and strip all html tags from it.
  $full_node_html = drupal_html_to_text(drupal_render(node_view($node)));

  // Add new field for drupal search.
  $document -> addField('ts_custom_text', $full_node_html);

  //Add domain info in the index
  if (isset($entity -> domains)) {
    foreach ($entity->domains as $domain) {
      // Switch default domain to 0, apache solr query issue on domain -1
      if ($domain == -1) {
        $domain = 0;
      }

      // Build an apachesolr-compatible domain search index key.
      $key = array(
        'name' => 'domain_id',
        'multiple' => TRUE,
        'index_type' => 'integer',
      );
      $key = apachesolr_index_key($key);

      // Add domain key to document.
      $document -> setMultiValue($key, $domain);
    }
  }

}

/**
 * Implements hook_apachesolr_query_prepare().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
  // Make ts_custom_text custom field searchable.
  $query -> addParam('fl', 'ts_custom_text');

  // Expose additional fields in the search result page.
  $query -> addParam('fl', 'im_field_category');
  $query -> addParam('fl', 'im_field_category_publication');
  $query -> addParam('fl', 'im_field_category_single');
  $query -> addParam('fl', 'teaser');

  // Add domain key to filter all queries.
  $domain = domain_get_domain();
  $query -> addParam('fq', 'im_domain_id:' . $domain['domain_id']);
}

/**
 * Implements hook_apachesolr_field_name_map_alter().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_field_name_map_alter(array &$map) {
  // Add human readable name for our custom field.
  $map['ts_custom_text'] = t('The full node object');
}

/**
 * Implements hook_form_alter().
 */
function sof_general_tweaks_form_alter(&$form, &$form_state, $form_id) {

  // Alter taxonomy search form.
  switch ($form_id) {
    case 'apachesolr_search_custom_page_search_form':
      if (isset($form['#search_page']['page_id'])) {
        if ($form['#search_page']['page_id'] == 'taxonomy_search') {

          // Remove retain filters field.
          unset($form['basic']['retain-filters']);

          // Change form action to global search page.
          $form['#action'] = '/search/site';
        }
      }
      break;

    // Alter mailchimp subscribe block form.
    case 'mailchimp_signup_subscribe_block_sof_mailchimp_form_form':
      // Wrap email field and submit button, in order to be replaced.
      $form['mergevars']['#prefix'] = '<div id="sof-general-tweaks-mailchimp"> ' . $form['mergevars']['#prefix'];
      $form['submit']['#suffix'] = '</div>';

      // Add ajax to the form.
      $form['submit']['#ajax'] = array(
        'callback' => 'sof_general_tweaks_mailchimp_ajax',
        'wrapper' => 'sof-general-tweaks-mailchimp',
        'method' => 'replace',
        'effect' => 'fade',
      );
      break;

    case 'commerce_checkout_form_checkout':
      unset($form['account']);
      break;
  }
}

/**
 * Implements mailchimp ajax callback.
 */
function sof_general_tweaks_mailchimp_ajax($form, $form_state) {
  if (!form_get_errors()) {
    $signup = reset($form_state['build_info']['args']);
    return $signup -> settings['confirmation_message'];
  }
  else {
    unset($form['description']);
    unset($form['mailchimp_lists']);
    return $form;
  }
}
