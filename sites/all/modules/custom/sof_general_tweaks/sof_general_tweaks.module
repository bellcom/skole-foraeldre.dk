<?php

/**
 * @file
 * Implements hooks and globally accesible functions.
 *
 * @author Goce Shutinoski <gsutinoski@propeople.dk>
 * @author Martina Radeva <martina@propeople.dk>
 * @author Lachezar Valchev <lachezar@propeople.dk>
 */

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * @see field_group.api.php
 */
function sof_general_tweaks_field_group_build_pre_render_alter(&$element) {
  // Add states for fieldgroups in publication content type.
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'publication_node_form') {
      $element['group_upload']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '1')),
      );

      $element['group_generate_from_content']['#states'] = array(
        'visible' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
        'expanded' => array('select[name="field_publication_file_type[' . LANGUAGE_NONE . ']"]' => array('value' => '2')),
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function sof_general_tweaks_field_extra_fields() {
  // News deck.
  // Additional field for additional latest news.
  $extra['fieldable_panels_pane']['news_pane']['display']['top_highlighted_news'] = array(
    'label' => t('Top highlighted news'),
    'description' => t('The letest news for the top section'),
    'weight' => 2,
    'visible' => FALSE,
  );
  $extra['fieldable_panels_pane']['news_pane']['display']['bottom_latest_news'] = array(
    'label' => t('Bottom latest news'),
    'description' => t('Three latest news'),
    'weight' => 3,
    'visible' => FALSE,
  );

  // Recommended items deck.
  // Additional field for additional latest news.
  $extra['fieldable_panels_pane']['recommended_items_pane']['display']['overview_recommended_items'] = array(
    'label' => t('Overview'),
    'description' => t('Overview of the items in this section'),
    'weight' => 4,
  );

  // What we write about deck.
  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['most_read_nodes'] = array(
    'label' => t('Most read'),
    'description' => t('Most read nodes'),
    'weight' => 4,
  );

  // Additional field for most read.
  $extra['fieldable_panels_pane']['what_we_write_about_pane']['display']['last_updated_nodes'] = array(
    'label' => t('Last updated'),
    'description' => t('Last updated nodes'),
    'weight' => 4,
  );

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function sof_general_tweaks_entity_view($entity, $type, $view_mode, $langcode) {
  switch ($type) {
    case 'fieldable_panels_pane':
      // Attach 'recommended_items_overview' view to the panel pane as extra
      // field.
      if ($entity->bundle == 'recommended_items_pane') {
        $entity->content['overview_recommended_items'] = array(
          '#type' => 'item',
          '#title' => t('Overview'),
          '#markup' => views_embed_view('recommended_items_overview', 'recommended_items_overview'),
        );
      }
      // Attach 'we_are_writing_about_additional_displays' view to the panel
      // pane as extra field.
      elseif ($entity->bundle == 'what_we_write_about_pane') {
        $entity->content['most_read_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Most read'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'most_popular'),
        );
        $entity->content['last_updated_nodes'] = array(
          '#type' => 'item',
          '#title' => t('Latest updated'),
          '#markup' => views_embed_view('we_are_writing_about_additional_displays', 'latest_updated'),
        );
      }
      // Attach 'news_deck_latest_3_nodes' view displays to the panel
      // pane as extra fields.
      elseif ($entity->bundle == 'news_pane') {
        $entity->content['top_highlighted_news'] = array(
          '#type' => 'item',
          '#title' => '',
          '#markup' => views_embed_view('news_deck_latest_3_nodes', 'news_deck_header'),
        );
        $entity->content['bottom_latest_news'] = array(
          '#type' => 'item',
          '#title' => '',
          '#markup' => views_embed_view('news_deck_latest_3_nodes', 'news_deck_latest_three_news'),
        );
      }
      break;
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  $node = node_load($entity->vid);

  // Render the node and strip all html tags from it.
  $node_view = node_view($node);
  $node_render = drupal_render($node_view);
  $full_node_html = drupal_html_to_text($node_render);

  // Add new fields for drupal search.
  $document->addField('ts_node_teaser', $node->field_teaser[LANGUAGE_NONE][0]['safe_value']);
  $document->addField('ts_custom_text', $full_node_html);

  // Add domain info in the index.
  if (isset($entity->domains)) {
    foreach ($entity->domains as $domain) {
      // Switch default domain to 0, apache solr query issue on domain -1.
      if ($domain == -1) {
        $domain = 0;
      }

      // Build an apachesolr-compatible domain search index key.
      $key = array(
        'name' => 'domain_id',
        'multiple' => TRUE,
        'index_type' => 'integer',
      );
      $key = apachesolr_index_key($key);

      // Add domain key to document.
      $document->setMultiValue($key, $domain);
    }
  }
}

/**
 * Implements hook_apachesolr_query_prepare().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
  // Expose additional fields in the search result page.
  $query->addParam('fl', 'ts_custom_text');
  $query->addParam('fl', 'im_field_category');
  $query->addParam('fl', 'im_field_category_publication');
  $query->addParam('fl', 'im_field_category_single');
  $query->addParam('fl', 'ts_node_teaser');
  $query->addParam('fl', 'teaser');

  // Add domain key to filter all queries.
  $domain = domain_get_domain();
  $query->addParam('fq', 'im_domain_id:' . $domain['domain_id']);
}

/**
 * Implements hook_apachesolr_field_name_map_alter().
 *
 * @see apachesolr.api.php
 */
function sof_general_tweaks_apachesolr_field_name_map_alter(array &$map) {
  // Add human readable name for our custom fields.
  $map['ts_custom_text'] = t('The full node object');
  $map['ts_node_teaser'] = t('Node teaser field');
}

/**
 * Implements hook_facet_items_alter().
 */
function sof_general_tweaks_facet_items_alter(&$build, &$settings) {

  if ($settings->facet == "im_field_category_publication") {
    foreach ($build as $key => $item) {
      $term_obj = taxonomy_term_load($item['#indexed_value']);
      if ($term_obj) {
        $build[$key]["#markup"] = !empty($term_obj->field_taxonomy_font_title) ? $term_obj->field_taxonomy_font_title['und'][0]['value'] : $term_obj->name;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function sof_general_tweaks_form_alter(&$form, &$form_state, $form_id) {
  // Alter mailchimp subscribe block form.
  if (strpos($form_id, 'mailchimp_signup_subscribe_block_') !== FALSE) {
    // Wrap email field and submit button, in order to be replaced.
    $form['mergevars']['#prefix'] = '<div id="sof-general-tweaks-mailchimp"> ' . $form['mergevars']['#prefix'];
    $form['submit']['#suffix'] = '</div>';

    // Add ajax to the form.
    $form['submit']['#ajax'] = array(
      'callback' => 'sof_general_tweaks_mailchimp_ajax',
      'wrapper' => 'sof-general-tweaks-mailchimp',
      'method' => 'replace',
      'effect' => 'fade',
    );
  }

  // Alter taxonomy search form.
  switch ($form_id) {
    case 'apachesolr_search_custom_page_search_form':
      if (isset($form['#search_page']['page_id'])) {
        if ($form['#search_page']['page_id'] == 'taxonomy_search') {
          // Remove retain filters field.
          unset($form['basic']['retain-filters']);

          // Change form action to global search page.
          $form['#action'] = '/search/site';
        }
      }
      break;

    case 'commerce_checkout_form_checkout':
      unset($form['account']);

      // The customer should see the coupon code that should use.
      // It is set in the coupon settings.
      if (isset($form['commerce_coupon'])) {
        $code = variable_get('sof_commerce_coupon_code', '');
        if ($code) {
          $form['commerce_coupon']['coupon_code']['#description'] = t('Enter here the coupon code: @code', array('@code' => $code));
        }
      }

      // Add custom validation to customer profile fields: telephone,
      // postal_code, cvr, ean.
      $shipping = $form['customer_profile_shipping'];
      $billing = $form['customer_profile_billing'];
      $form['customer_profile_billing']['field_sof_commerce_customer_tel'][$billing['field_sof_commerce_customer_tel']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_commerce_customer_cvr'][$billing['field_sof_commerce_customer_cvr']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_commerce_customer_ean'][$billing['field_sof_commerce_customer_ean']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_customer_post_code'][$billing['field_sof_customer_post_code']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');

      $form['customer_profile_shipping']['field_sof_commerce_customer_tel'][$shipping['field_sof_commerce_customer_tel']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_shipping']['field_sof_customer_post_code'][$shipping['field_sof_customer_post_code']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');

      // Disable country field and add its default vaue.
      $form['customer_profile_billing']['field_sof_customer_country'][$billing['field_sof_customer_country']['#language']][0]['value']['#default_value'] = t('Denmark');
      $form['customer_profile_billing']['field_sof_customer_country'][$billing['field_sof_customer_country']['#language']][0]['value']['#disabled'] = TRUE;

      $form['customer_profile_shipping']['field_sof_customer_country'][$shipping['field_sof_customer_country']['#language']][0]['value']['#default_value'] = t('Denmark');
      $form['customer_profile_shipping']['field_sof_customer_country'][$shipping['field_sof_customer_country']['#language']][0]['value']['#disabled'] = TRUE;

      // Validate required fields Firm and Institution name, because #states
      // are not working.
      $form['customer_profile_billing']['field_sof_commerce_customer_firm'][$billing['field_sof_commerce_customer_firm']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');
      $form['customer_profile_billing']['field_sof_commerce_customer_name'][$billing['field_sof_commerce_customer_name']['#language']][0]['value']['#element_validate'] = array('sof_general_tweaks_commerse_validation');

      break;

    case 'views_form_commerce_cart_form_sof_default':
      $settings = array();
      $commerce_line_items = field_get_items('commerce_order', $form_state['order'], 'commerce_line_items');

      foreach ($commerce_line_items as $key => $item) {
        $line_item = commerce_line_item_load($item['line_item_id']);

        if (isset($line_item->commerce_product)) {
          $commerce_product_id = field_get_items('commerce_line_item', $line_item, 'commerce_product');
          $commerce_product = commerce_product_load($commerce_product_id[0]['product_id']);
          $commerce_quantity = field_get_items('commerce_product', $commerce_product, 'field_sof_commerce_quantity');

          if (is_array($commerce_quantity) && $commerce_quantity[0]['value'] > 1) {
            $settings[$key] = $commerce_quantity[0]['value'];
          }
        }
      }

      $form['#attached']['js'] = array(
        drupal_get_path('module', 'sof_general_tweaks') . '/js/sof_general_tweaks_commerce.js',
      );
      drupal_add_js(array('sofGeneralTweaksCommerce' => $settings), 'setting');
      break;

    // Set Including VAT as default value for the shipping base rate.
    case 'commerce_flat_rate_service_form':
      if (isset($form['flat_rate']['include_tax'])) {
        $form['flat_rate']['include_tax']['#default_value'] = array('test');
        $form['flat_rate']['include_tax']['#disabled'] = TRUE;
      }
      break;

    case 'commerce_coupon_ui_settings_form':
      // Alter form for setting the coupon code that should appear for the
      // customers.
      $form['sof_commerce_coupon_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Coupon Code'),
        '#description' => t('Enter the code that should appear as description pf the active coupon field.'),
        '#default_value' => variable_get('sof_commerce_coupon_code', ''),
      );
      break;

    case 'article_node_form':
    case 'news_node_form':
      $form['field_related_terms']['#states'] = array(
        'visible' => array('input[id="edit-field-set-rt-manually-und"]' => array('checked' => TRUE)),
      );
      break;

  }
}

/**
 * Implements mailchimp ajax callback.
 */
function sof_general_tweaks_mailchimp_ajax($form, $form_state) {
  if (!form_get_errors()) {
    $signup = reset($form_state['build_info']['args']);

    return $signup->settings['confirmation_message'];
  }
  else {
    unset($form['description']);
    unset($form['mailchimp_lists']);

    return $form;
  }
}

/**
 * Implements hook_message_presave().
 */
function sof_general_tweaks_message_presave($message) {
  if ($message->type == 'sof_order_admin_message') {
    $message->arguments['!sof-order-summary'] = array(
      'callback' => 'sof_order_admin_message',
      'pass message' => TRUE,
    );
  }

  if ($message->type == 'sof_order_user_message') {
    $message->arguments['!order-summary'] = array(
      'callback' => 'sof_order_user_message',
      'pass message' => TRUE,
    );
  }
}

/**
 * Implements message argument callback.
 *
 * Message type: sof_order_admin_message.
 */
function sof_order_admin_message(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('sof_commerce_cart_summary_admin');
  $view->set_arguments(array($wrapper->field_sof_message_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  return $view->preview();
}

/**
 * Implements message argument callback.
 *
 * Message type: sof_order_user_message.
 */
function sof_order_user_message(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('sof_commerce_cart_checkout_summary');
  $view->set_arguments(array($wrapper->field_sof_message_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  return $view->preview();
}

/**
 * Implements hook_mail_alter().
 *
 * Alter the mail send to the user in order to attach pdfs bought by him.
 */
function sof_general_tweaks_mail_alter(&$message) {
  $attachments = array();

  if ($message['key'] === 'sof_order_user_message') {
    $order = field_get_items('message', $message['params']['message_entity'], 'field_sof_message_order');
    $oid = $order['0']['target_id'];
    $order_obj = commerce_order_load($oid);
    $line_items = field_get_items('commerce_order', $order_obj, 'commerce_line_items');
    foreach ($line_items as $line_item) {
      $commerce_li = commerce_line_item_load($line_item['line_item_id']);
      if (isset($commerce_li->commerce_product)) {
        $commerce_product = field_get_items('commerce_line_item', $commerce_li, 'commerce_product');
        $product = commerce_product_load($commerce_product[0]['product_id']);
        if (isset($product->field_sof_commerce_pdf)) {
          $pdf = field_get_items('commerce_product', $product, 'field_sof_commerce_pdf');
          $attachments[] = array(
            'filepath' => $pdf[0]['uri'],
          );
        }
      }
    }
    $message['params']['attachments'] = $attachments;
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 */
function sof_general_tweaks_commerce_line_item_summary_link_info_alter(&$links) {
  // Link checkout button to the cart.
  if (isset($links['checkout'])) {
    $links['checkout']['href'] = 'cart';
  }
}

/**
 * Implements hook_menu_alter().
 */
function sof_general_tweaks_menu_alter(&$items) {
  $items['cart']['page callback'] = 'sof_general_tweaks_cart_callback';
}

/**
 * Implements custom cart menu callback.
 */
function sof_general_tweaks_cart_callback() {
  $user = $GLOBALS['user'];

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
      // Add the form for editing the cart contents.
      $content = commerce_embed_view('commerce_cart_form_sof', 'default', array($order->order_id), 'cart');
    }
  }

  return $content;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sof_general_tweaks_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $sof_quantity = field_get_items('commerce_product', $form_state['default_product'], 'field_sof_commerce_quantity');

  if (is_array($sof_quantity) && $sof_quantity[0]['value'] > 1) {
    $form['quantity']['#value'] = $sof_quantity[0]['value'];
  }
}

/**
 * Implements the commerce customer profile fields validation callback.
 */
function sof_general_tweaks_commerse_validation($element, &$form_state) {
  $value = $element['#value'];
  $billing = $form_state['input']['customer_profile_billing'];
  $lang = isset($element['#language']) ? $element['#language'] : LANGUAGE_NONE;

  // Skip shipping fields validation if the information will be copied from
  // the billing profile.
  $copy = $form_state['input']['customer_profile_shipping']['commerce_customer_profile_copy'];
  if ($copy && $element['#parents'][0] == 'customer_profile_shipping') {
    return;
  }

  if (isset($element['#field_name'])) {
    switch ($element['#field_name']) {
      case 'field_sof_customer_post_code':
        if ($value && (!is_numeric($value) || drupal_strlen($value) < 4)) {
          form_error($element, t('Udfyld Postnummer.'));
        }
        break;

      // Validate phone to contain only digits, spaces and +.
      case 'field_sof_commerce_customer_tel':
        $pattern = '/^\+?\s?([0-9]+\s?)+$/';
        if ($value && !preg_match($pattern, $value)) {
          form_error($element, t('Udfyld Telefonnummer.'));
        }
        break;

      // Validate cvr to be a number with exactly 8 digits.
      case 'field_sof_commerce_customer_cvr':
        if ($value && (!is_numeric($value) || drupal_strlen($value) < 8)) {
          form_error($element, t('Udfyld CVR nr.'));
        }
        break;

      // Validate ean to be a number with exactly 13 digits.
      case 'field_sof_commerce_customer_ean':
        if ($value && (!is_numeric($value) || drupal_strlen($value) < 13)) {
          form_error($element, t('Udfyld EAN Number.'));
        }
        // Validate if empty, the field is required;
        if ($billing['field_sof_commerce_customer_type'][$lang] == 'public') {
          if (!$value) {
            form_error($element, t('EAN field is required.'));
          }
        }
        break;

      // Firm name field is required when it is visible.
      case 'field_sof_commerce_customer_firm':
        if ($billing['field_sof_commerce_customer_type'][$lang] == 'company') {
          if (!$value) {
            form_error($element, t('Firma felt er obligatorisk.'));
          }
        }
        break;

      // Institution name is required when it is visible.
      case 'field_sof_commerce_customer_name':
        if ($billing['field_sof_commerce_customer_type'][$lang] == 'public') {
          if (!$value) {
            form_error($element, t('Navn på institution felt er obligatorisk.'));
          }
        }
        break;
    }
  }
}

/**
 * Adding new style for Seven admin theme.
 */
function sof_general_tweaks_preprocess_html(&$variables) {
  // Add conditional stylesheets for admin pages on admin theme.
  if (arg(0) == "admin") {
    // Reference your current admin theme.
    $theme_path = drupal_get_path('theme', 'seven');
    // Reference your own stylesheet.
    drupal_add_css(drupal_get_path('module', 'sof_general_tweaks') . '/css/sof_general_tweaks.css', array('weight' => CSS_THEME));
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * Defines new payment method - Invoice.
 * It is just defined, because it is wanted only as an option.
 */
function sof_general_tweaks_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['sof_invoice_payment'] = array(
    'title' => t('Invoice'),
    'description' => t('Custom SOF invoice payment method.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_price_component_type_info_alter().
 *
 * Alter the price component display title.
 */
function sof_general_tweaks_commerce_price_component_type_info_alter(&$component_types) {
  if (isset($component_types['base_price'])) {
    $component_types['base_price']['display_title'] = t('Total excluding VAT');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Set Include VAT as default value for commerce price and disabled the field.
 */
function sof_general_tweaks_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'commerce_price' && $context['instance']['entity_type'] == 'commerce_product') {
    if (isset($element['include_tax'])) {
      $element['include_tax']['#default_value'] = 'test';
      $element['include_tax']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_commerce_price_formatted_components_alter().
 */
function sof_general_tweaks_commerce_price_formatted_components_alter(&$components, &$price, $entity) {
  // Reorder Order total components.
  if (isset($components['tax|test'])) {
    $components['tax|test']['weight'] = -20;
  }

  // Add new component to Order total - Total including VAT.
  $base_pice = commerce_price_component_load($price, 'base_price');
  $tax = commerce_price_component_load($price, 'tax|test');
  $amount = $base_pice[0]['price']['amount'] + $tax[0]['price']['amount'];

  $new_component = array(
    'title' => t('Total including VAT'),
    'price' => array(
      'amount' => $amount,
      'currency_code' => $price['currency_code'],
      'data' => array(),
    ),
    'weight' => -10,
  );

  $components['base_price_with_tax'] = $new_component;
}

/**
 * Implements hook_views_pre_render().
 */
function sof_general_tweaks_views_pre_render(&$view) {
  switch ($view->name) {
    case 'publication_listing_view':
      foreach ($view->result as $k => $result) {
        $nid = $result->entity_id;
        $view->result[$k]->url = check_plain(url('node/' . $nid, array('absolute' => TRUE)));
      }
      break;
  }
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Add additioanl view filters for admin_views_node view.
 * @see views.api.php
 */
function sof_general_tweaks_views_default_views_alter(&$views) {

  if (isset($views['admin_views_node'])) {

    // Pick default display handler.
    $handler =& $views['admin_views_node']->display['default']->handler;

    // Add taxonomy general catregory filter.
    $handler->display->display_options['filters']['tid']['id'] = 'tid';
    $handler->display->display_options['filters']['tid']['table'] = 'taxonomy_term_data';
    $handler->display->display_options['filters']['tid']['field'] = 'tid';
    $handler->display->display_options['filters']['tid']['relationship'] = 'term_node_tid';
    $handler->display->display_options['filters']['tid']['group'] = 1;
    $handler->display->display_options['filters']['tid']['exposed'] = TRUE;
    $handler->display->display_options['filters']['tid']['expose']['operator_id'] = 'tid_op';
    $handler->display->display_options['filters']['tid']['expose']['label'] = 'General Category';
    $handler->display->display_options['filters']['tid']['expose']['operator'] = 'tid_op';
    $handler->display->display_options['filters']['tid']['expose']['identifier'] = 'tid';
    $handler->display->display_options['filters']['tid']['expose']['multiple'] = TRUE;
    $handler->display->display_options['filters']['tid']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      5 => 0,
      3 => 0,
      4 => 0,
    );
    $handler->display->display_options['filters']['tid']['type'] = 'select';
    $handler->display->display_options['filters']['tid']['vocabulary'] = 'general_category';
    $handler->display->display_options['filters']['tid']['hierarchy'] = 1;

    // Add taxonomy publication catregory filter.
    $handler->display->display_options['filters']['tid_1']['id'] = 'tid_1';
    $handler->display->display_options['filters']['tid_1']['table'] = 'taxonomy_term_data';
    $handler->display->display_options['filters']['tid_1']['field'] = 'tid';
    $handler->display->display_options['filters']['tid_1']['relationship'] = 'term_node_tid';
    $handler->display->display_options['filters']['tid_1']['exposed'] = TRUE;
    $handler->display->display_options['filters']['tid_1']['expose']['operator_id'] = 'tid_1_op';
    $handler->display->display_options['filters']['tid_1']['expose']['label'] = 'Publication category';
    $handler->display->display_options['filters']['tid_1']['expose']['operator'] = 'tid_1_op';
    $handler->display->display_options['filters']['tid_1']['expose']['identifier'] = 'tid_1';
    $handler->display->display_options['filters']['tid_1']['expose']['multiple'] = TRUE;
    $handler->display->display_options['filters']['tid_1']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      5 => 0,
      3 => 0,
      4 => 0,
    );
    $handler->display->display_options['filters']['tid_1']['type'] = 'select';
    $handler->display->display_options['filters']['tid_1']['vocabulary'] = 'publication_category';
    $handler->display->display_options['filters']['tid_1']['hierarchy'] = 1;
  }

}
