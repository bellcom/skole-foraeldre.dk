<?php

/**
 * @file
 * SOF pdf gerenator for publications and news/articles.
 *
 * @author Goce Shutinoski <gsutinoski@propeople.dk>
 * @author Lachezar Valchev <lachezar@propeople.dk>
 */

/**
 * Implements hook_permission().
 */
function sof_pdf_generator_permission() {
  return array(
    'sof generate publication pdf' => array(
      'title' => t('SOF generate publication pdf'),
      'description' => t('Allow generating pdf from preselected nodes'),
    ),
    'sof generate single pdf' => array(
      'title' => t('SOF generate single pdf'),
      'description' => t('Allow generating pdf from single node (article or news)'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sof_pdf_generator_menu() {
  // Publication download link.
  $items['sof-pdf-generate/%'] = array(
    'title' => 'Publicataion Pdf Generator',
    'description' => 'Administer Publicataion Pdf Generator',
    'access arguments' => array('sof generate publication pdf'),
    'page callback' => 'sof_generate_pdf_from_nodes',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  // Article/News download link.
  $items['sof-pdf-single/%'] = array(
    'title' => 'Article/News Pdf Generator',
    'description' => 'Administer Publicataion Pdf Generator',
    'access arguments' => array('sof generate single pdf'),
    'page callback' => 'sof_generate_pdf_from_node',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * SOF pdf generator callback for publication.
 *
 * @param int $nid
 *   node id from wich content the pdf will be generated.
 */
function sof_generate_pdf_from_nodes($nid) {
  if (!isset($nid)) {
    return;
  }

  $node_obj = node_load($nid);
  if ($node_obj) {
    if ($node_obj->type == 'publication') {
      // Get node rendering array.
      $node_view = node_view($node_obj, 'default');
      switch ($node_view['field_publication_file_type']['#items'][0]['value']) {
        // Trigger file download.
        case 1:
          if ($node_view['field_file']) {
            $file_uri = $node_view['field_file']['#items'][0]['uri'];
            $file_mime = $node_view['field_file']['#items'][0]['filemime'];
            $file_name = $node_view['field_file']['#items'][0]['filename'];
            $file_size = $node_view['field_file']['#items'][0]['filesize'];
            $http_headers = array(
              'Content-Type' => $file_mime,
              'Content-Disposition' => 'attachment; filename="' . $file_name . '"',
              'Content-Length' => $file_size,
            );

            file_transfer($file_uri, $http_headers);
          }
          else {
            return drupal_access_denied();
          }
          break;

        // Generate pdf file from preselected nodes.
        case 2:
          sof_pdf_generator_publication_pdf($node_view);
          break;
      }
    }
  }
}

/**
 * SOF pdf generator callback for articles and news.
 *
 * @param int $nid
 *   node id from wich content the pdf will be generated.
 */
function sof_generate_pdf_from_node($nid) {
  if (!isset($nid)) {
    return;
  }

  $node_obj = node_load($nid);
  if ($node_obj) {
    $node_types = array(
      'article',
      'news',
    );
    if (in_array($node_obj->type, $node_types)) {
      // Add Template css.
      drupal_add_css(drupal_get_path('module', 'sof_pdf_generator') . '/css/sof_pdf_generator.css');

      // Add Columnizer library.
      libraries_load('columnizer');

      // Add Columnizer js.
      drupal_add_js(array('sof_pdf_generator' => array('pdfColumnize' => TRUE)), 'setting');
      drupal_add_js(drupal_get_path('module', 'sof_pdf_generator') . '/js/sof_pdf_generator.js', 'file');

      // Main template variables.
      $sof_print_vars['css'] = drupal_get_css();
      $sof_print_vars['js'] = drupal_get_js();
      $sof_print_vars['page'] = "";

      // Setup print content.
      $node_content = array();

      // Add image on top.
      if ($node_obj->field_image_slider) {
        $node_content['image'] = theme('sof_pdf_top_image', array(
          'image' => field_view_field('node', $node_obj, 'field_image_slider', 'default'),
        ));
      }

      // Add the rest of the fields.
      $node_content['title'] = $node_obj->title;
      $node_content['teaser'] = field_view_field('node', $node_obj, 'field_teaser', 'default');
      $node_content['body'] = field_view_field('node', $node_obj, 'body', 'default');

      $sof_print_vars['page'] = theme('sof_pdf_generator_pages', array('content' => $node_content));
      $content_page = theme('sof_pdf_generator_main', $sof_print_vars);

      // Send html to print.
      $library = libraries_load('phpwkhtmltopdf');
      if ($library && !empty($library['loaded'])) {
        // Set global options for the pdf.
        $pdf = new WkHtmlToPdf(array(
          'no-outline',
          'disable-smart-shrinking',
          'no-stop-slow-scripts',
          'dpi' => 75,
          'encoding' => 'UTF-8',
          'javascript-delay' => 1000,
          'footer-center' => '[page]',
          'footer-font-size' => 9,
        ));
        // set header options
        sof_pdf_generator_set_header($node_obj, $pdf);

        // Add a HTML file, a HTML string or a page from a URL.
        $pdf->addPage($content_page);

        // Create fielname from url alias.
        $url_alias = drupal_lookup_path('alias', 'node/' . $node_obj->nid);
        $url_alias_array = explode('/', $url_alias);
        $filename = end($url_alias_array) . '.pdf';

        // Send to client as file download.
        $pdf->send($filename);
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function sof_pdf_generator_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'linkit' && !empty($plugin_type)) {
    return "plugins/" . $plugin_type;
  }
}

/**
 * Implements hook_theme().
 */
function sof_pdf_generator_theme($existing, $type, $theme, $path) {
  return array(
    'sof_pdf_generator_main' => array(
      'variables' => array(
        'css' => NULL,
        'js' => NULL,
        'page' => NULL,
      ),
      'template' => 'theme/sof_pdf_generator_main',
    ),
    'sof_pdf_generator_cover' => array(
      'variables' => array(
        'image' => NULL,
        'title' => NULL,
        'teaser' => NULL,
        'logo' => NULL,
        'color' => NULL,
      ),
      'template' => 'theme/sof_pdf_generator_cover',
    ),
    'sof_pdf_generator_pages' => array(
      'variables' => array('content' => NULL),
      'template' => 'theme/sof_pdf_generator_pages',
    ),
    'sof_pdf_top_image' => array(
      'variables' => array(
        'image' => NULL,
        'title' => NULL,
      ),
      'template' => 'theme/sof_pdf_top_image',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function sof_pdf_generator_field_extra_fields() {
  // Additiona field for download links on article, news and publication.
  foreach (array('news', 'article', 'publication') as $node_type) {
    $extra['node'][$node_type]['display']['download_as_pdf'] = array(
      'label' => t('Download pdf'),
      'description' => t('Provides link for pdf download'),
      'weight' => 10,
      'visible' => FALSE,
    );
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function sof_pdf_generator_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);
  $extrafield_name = 'download_as_pdf';

  // Attach download as pdf link to articles, news and publication.
  if (isset($extrafields[$extrafield_name]) && isset($extrafields[$extrafield_name]['visible']) && $extrafields[$extrafield_name]['visible']) {
    if (!isset($node->field_publication_file_type) || $node->field_publication_file_type[LANGUAGE_NONE][0]['value'] != 0) {
      $node->content['download_as_pdf'] = array(
        '#markup' => l(t('Download as pdf'), ($node->type == 'publication' ? 'sof-pdf-generate/' : 'sof-pdf-single/') . $node->nid, array(
          'attributes' => array('class' => array('download-as-pdf')),
        )),
      );
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sof_pdf_generator_preprocess_field(&$vars) {
  $element = $vars['element'];

  switch ($element['#field_name']) {
    case'body':{
      drupal_add_js(drupal_get_path('module', 'sof_pdf_generator') . '/js/sof_pdf_generator.js');
      }
    break;
  }
}

/**
 * Helper function for setting the header parameters of the pdf.
 *
 * @param object $node
 *   Node object from which to show the title and change date.
 * @param object $pdf
 *   The WkHtmlToPdf object from phpwkhtmltopdf library on which the header options will be set.
 */
function sof_pdf_generator_set_header($node, $pdf) {
  // The header-left/header-right options have trouble with Unicode characters
  // So we will use header-html instead.
  // As a bonus that also lets us use fancier formatting and custom fonts.

  $current_domain = domain_get_domain();
  $current_domain = parse_url($current_domain['path'], PHP_URL_HOST);

  // TODO we can even try to bold the node title as in the sample PDF but that'll require @font-face definitions for bold, without them wkhtmltopdf does a weird 'faux-bold' by doubling the text.
  $header_left = check_plain(drupal_strtoupper($node->title)) . ' / ' . check_plain(drupal_strtoupper(format_date($node->changed, 'custom', 'j. F Y')));
  $header_right = check_plain(drupal_strtoupper($current_domain['path']));
  // It must have doctype and charset metatag.
  $header_html = "<!DOCTYPE html>\n<meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />\n";
  // Because we have weird user style sheet, we need to reset some styles on the html and body tags; also set font
  $header_html .= "<html style='height:auto;margin:0;padding:0'><body style='width:500px;height:auto;margin:0 auto;padding:0;font:6pt conduit_itcregular,sans-serif'>\n";
  $header_html .= "<div style='float:left;white-space:nowrap;'>" . $header_left . "</div><div style='float:right;white-space:nowrap'>" . $header_right . "</div>";
  $header_html .= "</body></html>";

  $pdf->setOptions(array(
    'header-html' => $header_html,
    // adding a header-html changes the implicit margin-top from 10mm to 0, we bring it back.
    // we add additional top margin by applying padding-top to the page divs,
    // because if we added it here it would affect the cover page too.
    'margin-top' => '10mm',
    // the meaning of header-spacing also changes slightly, it is the distance
    // from the top of the content to the top of the header now, instead of to the bottom.
    'header-spacing' => 0,
  ));
}

/**
 * Helper function for generating pdf files of the publication.
 *
 * @param array $node_view
 *   Received from node_view().
 */
function sof_pdf_generator_publication_pdf($node_view) {
  $library = libraries_load('phpwkhtmltopdf');
  if ($library && !empty($library['loaded'])) {

    // Set global options for the pdf.
    $pdf = new WkHtmlToPdf(array(
      'no-outline',
      'disable-smart-shrinking',
      'no-stop-slow-scripts',
      'dpi' => 75,
      'encoding' => 'UTF-8',
      'javascript-delay' => 1000,
      'user-style-sheet' => drupal_get_path('theme', 'sof_theme') . '/css/global.styles.css',
      'page-offset' => -1,
      'footer-center' => '[page]',
      'footer-font-size' => 9,

      // the following two lines work around a bug in wkhtmltopdf when loading the same css/font resource multiple times
      // https://github.com/wkhtmltopdf/wkhtmltopdf/issues/1865
      'run-script' => 'setInterval(function(){if(document.readyState=="complete") window.status="done";},100)',
      'window-status' => 'done',
    ));
    // set header options
    sof_pdf_generator_set_header($node_view['#node'], $pdf);

    // Add Template css.
    drupal_add_css(drupal_get_path('module', 'sof_pdf_generator') . '/css/sof_pdf_generator.css');

    // Allow colimnizer.
    libraries_load('columnizer');
    drupal_add_js(array('sof_pdf_generator' => array('pdfColumnize' => TRUE)), 'setting');
    drupal_add_js(drupal_get_path('module', 'sof_pdf_generator') . '/js/sof_pdf_generator.js', 'file');

    // Main template variables.
    $sof_print_vars['css'] = drupal_get_css();
    $sof_print_vars['js'] = drupal_get_js();
    $sof_print_vars['page'] = "";

    // Cover page setup.
    $cover_color = isset($node_view['field_pdf_cover_color']['#items'][0]['rgb']) ? $node_view['field_pdf_cover_color']['#items'][0]['rgb'] : '#FFFFFF';
    $logo_setting = in_array($cover_color, array('#FFFFFF', '#EBECEC')) ? theme_get_setting('logo') : theme_get_setting('footerlogo_image');
    $sof_print_vars['page'] = theme('sof_pdf_generator_cover', array(
      'title' => $node_view['field_pdf_title']['#items'][0]['value'],
      'teaser' => $node_view['field_pdf_description']['#items'][0]['value'],
      'logo' => file_create_url($logo_setting),
      'color' => $cover_color,
    ));
    $cover_page = theme('sof_pdf_generator_main', $sof_print_vars);
    $pdf->addCover($cover_page);

    // Add table of contents.
    $pdf->addToc(array(
      'xsl-style-sheet' => drupal_get_path('module', 'sof_pdf_generator') . '/xml/sof_pdf_generator_toc_style.xml',
    ));

    // Content pages setup.
    if (isset($node_view['field_pdf_content']['#items'])) {
      foreach ($node_view['field_pdf_content']['#items'] as $key => $item) {
        $node_content[$key] = array();

        // Add image on top.
        if ($item['entity']->field_image_slider) {
          $node_content['image'] = theme('sof_pdf_top_image', array(
            'image' => field_view_field('node', $item['entity'], 'field_image_slider', 'default'),
          ));
        }
        else {
          $node_content['image'] = FALSE;
        }

        // Add the rest of the fields.
        $node_content['title'] = $item['entity']->title;
        $node_content['teaser'] = field_view_field('node', $item['entity'], 'field_teaser', 'default');
        $node_content['body'] = field_view_field('node', $item['entity'], 'body', 'default');

        $sof_print_vars['page'] = theme('sof_pdf_generator_pages', array('content' => $node_content));
        $content_page = theme('sof_pdf_generator_main', $sof_print_vars);

        $pdf->addPage($content_page);
      }
    }

    // Create fielname from url alias.
    $url_alias = drupal_lookup_path('alias', 'node/' . $node_view['#node']->nid);
    $url_alias_array = explode('/', $url_alias);
    $filename = end($url_alias_array) . '.pdf';

    // Send to client as file download.
    $pdf->send($filename);
  }
}
